{"version":3,"file":"index.js","sources":["../src/Proj/Ellipsoids.js","../src/Proj/Datum.js","../src/Proj/Prime.js","../src/Proj/GeogCs.js","../src/Proj/Projection.js","../src/Proj/ProjParameter.js","../src/Proj/Uint.js","../src/Proj/ProjCs.js","../src/Proj/Cs.js","../src/index.js"],"sourcesContent":["class Ellipsoids{\r\n    ellipsoids_list=[\r\n        {\r\n            name:\"GRS80\",\r\n            data:[6378137.0,298.257222101],\r\n        },\r\n        {\r\n            name:\"airy\",\r\n            data:[6377563.396,6356256.910],\r\n        },\r\n        {\r\n            name:\"bessel\",\r\n            data:[6377397.155,299.1528128]\r\n        },\r\n        {\r\n            name:\"clrk66\",\r\n            data:[6378206.4,6356583.8]\r\n        },\r\n        {\r\n            name:\"intl\",\r\n            data:[6378388.0,297.0]\r\n        },\r\n        {\r\n            name:\"WGS60\",\r\n            data:[6378165.0,298.3]\r\n        },\r\n        {\r\n            name:\"WGS66\",\r\n            data:[6378145.0,298.25]\r\n        },\r\n        {\r\n            name:\"WGS72\",\r\n            data:[6378135.0,298.26]\r\n        },\r\n        {\r\n            name:\"WGS84\",\r\n            data:[6378137.0,298.257223563]\r\n        },\r\n        {\r\n            name:\"sphere\",\r\n            data:[6370997.0,6370997.0]\r\n        }\r\n    ]\r\n    constructor(ellip) {\r\n        let values=Object.values(ellip)[0]\r\n        this.name=values[0]\r\n        this.a=values[1]\r\n        this.rf=values[2]\r\n    }\r\n    to_proj4(){\r\n        if(this.ellipsoids_list.find(value => value.name.toLowerCase()===this.name.toLowerCase())){\r\n            return  \" +ellps=\"+this.name\r\n        }\r\n        let ell=this.ellipsoids_list.find(value => (value.data[0]==this.a) && value.data[1]==this.rf);\r\n        if (ell){\r\n            return \" +ellps=\"+ell.name\r\n        }else{\r\n            return  \" +a=\"+this.a+\" rf=\"+this.rf\r\n        }\r\n    }\r\n}\r\nexport default  Ellipsoids\r\n","import Ellipsoids from \"./Ellipsoids\"\r\nclass Datum{\r\n    datum_list=[\r\n        {\r\n            proj4: \"WGS84\",\r\n            ogc_wkt: \"WGS_1984\",\r\n            esri_wkt : \"D_WGS_1984\",\r\n        }]\r\n    constructor(datum) {\r\n        let values=Object.values(datum)[0]\r\n        this.name=values[0];\r\n        this.ellipsoid=new Ellipsoids(values[1])\r\n    }\r\n    to_proj4(){\r\n        // let str=''\r\n        //      if (this.datum_list.find(value => value.esri_wk))\r\n        return this.ellipsoid.to_proj4()\r\n    }\r\n\r\n}\r\nexport default Datum\r\n","\r\n\r\n\r\nclass Prime{\r\n    prime_list=[\"greenwich\", \"lisbon\", \"paris\", \"bogota\", \"madrid\",\"rome\",\"bern\",\"jakarta\",\"ferro\",\"brussels\",\"stockholm\",\"athens\",\"oslo\"]\r\n    constructor(prime) {\r\n        let values=Object.values(prime)[0]\r\n        this.prime_name=values[0];\r\n        this.prime_value=values[1]\r\n    };\r\n    to_proj4(){\r\n        let  str=\" +pm=\"\r\n        if (this.prime_list.find(value => value.toLowerCase()===this.prime_name.toLowerCase())){\r\n            str+=this.prime_name;\r\n        }else{\r\n            str+=this.prime_value\r\n        }\r\n        return str;\r\n    }\r\n}\r\nexport default Prime\r\n","import Datum from \"./Datum\";\r\nimport Prime from \"./Prime\";\r\nclass GeogCs{\r\n    constructor(name, datum, prime_mer, angunit, twin_ax=null) {\r\n        this.name=name;\r\n        this.datum=new Datum(datum);\r\n        this.prime_mer=new Prime(prime_mer);\r\n        this.angunit=angunit;\r\n        this.twin_ax=twin_ax;\r\n    }\r\n    _get_geo_proj4(){\r\n        return this.datum.to_proj4()+this.prime_mer.to_proj4()\r\n    }\r\n    to_proj4(isPro=false){\r\n        let str_proj=this._get_geo_proj4()\r\n        if (isPro){\r\n            return str_proj\r\n        }else {\r\n            return  \" +proj=longlat\"+str_proj\r\n        }\r\n\r\n    }\r\n}\r\nexport default GeogCs\r\n","class Projection{\r\n    proj_aliases_list=[\r\n        {\"Aitoff\":                              \"aitoff\"  },\r\n        {\"Albers\":                              \"aea\"     },\r\n        {\"Azimuthal_Equidistant\":               \"aeqd\"    },\r\n        {\"Bonne\":                               \"bonne\"   },\r\n        {\"Cassini\":                             \"cass\"    },\r\n        {\"Chamberlin_Trimetric\":                \"chamb\"   },\r\n        {\"Craster_Parabolic\":                   \"crast\"   },\r\n        {\"Cylindrical_Equal_Area\":              \"cea\"     },\r\n        {\"Eckert_I\":                            \"eck1\"    },\r\n        {\"Eckert_II\":                           \"eck2\"    },\r\n        {\"Eckert_III\":                          \"eck3\"    },\r\n        {\"Eckert_IV\":                           \"eck4\"    },\r\n        {\"Eckert_V\":                            \"eck5\"    },\r\n        {\"Eckert_VI\":                           \"eck6\"    },\r\n        {\"Equidistant_Conic\":                   \"eqdc\"    },\r\n        {\"Equidistant_Cylindrical\":             \"eqc\"     },\r\n        {\"Plate_Carree\":                        \"eqc\"     },\r\n        {\"Gall_Stereographic\":                  \"gall\"    },\r\n        {\"Gauss_Kruger\":                        \"tmerc\"   },\r\n        {\"Gnomonic\":                            \"gnom\"    },\r\n        {\"Goode_Homolosine\":                    \"goode\"   },\r\n        {\"Hammer_Aitoff\":                       \"hammer\"  },\r\n        {\"Hotine_Oblique_Mercator_Azimuth_Center\" :\"merc\"    },\r\n        {\"Krovak\":                              \"krovak\"  },\r\n        {\"Lambert_Azimuthal_Equal_Area\":        \"laea\"    },\r\n        {\"Lambert_Conformal_Conic\":             \"lcc\"     },\r\n        {\"Loximuthal\":                          \"loxim\"   },\r\n        {\"Mercator\":                            \"merc\"    },\r\n        {\"Miller_Cylindrical\":                  \"mill\"    },\r\n        {\"Mollweide\":                           \"moll\"    },\r\n        {\"New_Zealand_Map_Grid\":                \"nzmg\"    },\r\n        {\"Orthographic\":                        \"ortho\"   },\r\n        {\"Perspectice\":                         \"pconic\"  },\r\n        {\"Polyconic\":                           \"poly\"    },\r\n        {\"Quartic_Authalic\":                    \"qua_aut\" },\r\n        {\"Robinson\":                            \"robin\"   },\r\n        {\"Sinusoidal\":                          \"sinu\"    },\r\n        {\"Stereographic\":                       \"stere\"   },\r\n        {\"Stereographic_South_Pole\":            \"stere\"   },\r\n        {\"Double_Stereographic\":                \"sterea\"  },\r\n        {\"Transverse_Mercator\":                 \"tmerc\"   },\r\n        {\"Two_Point_Equidistant\":               \"tpeqd\"   },\r\n        {\"Universal_Polar_Stereographic\":       \"ups\"     },\r\n        {\"Universal_Transverse_Mercator\":       \"utm\"     },\r\n        {\"Van_der_Grinten_I\":                   \"vandg\"   },\r\n        {\"Winkel_I\":                            \"wink1\"   },\r\n        {\"Winkel_II\":                           \"wink2\"   },\r\n        {\"Winkel_Tripel\":                       \"wintri\"  },\r\n        {\"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\":  \"merc\"    },\r\n        {\"Hotine_Oblique_Mercator_Two_Point_Natural_Origin\": \"tpeqd\"   },\r\n        {\"Mercator_Auxiliary_Sphere\":           \"merc\"    },\r\n        {\"Stereographic_North_Pole\":            \"stere\"   },\r\n        {\"Transverse_Mercator_Complex\":         \"tmerc\"   },\r\n    ];\r\n    constructor(proj) {\r\n        this.proj_name=Object.values(proj)[0][0]\r\n    };\r\n    _get_proj_name(){\r\n        for (let i = 0; i < this.proj_aliases_list.length; i++) {\r\n            let obj=this.proj_aliases_list[i];\r\n            if (Object.keys(obj)[0].toLowerCase()===this.proj_name.toLowerCase()){\r\n                return obj[Object.keys(obj)[0]]\r\n            }\r\n        }\r\n        return  \"\"\r\n    };\r\n    to_proj4(){\r\n        return this._get_proj_name()\r\n    }\r\n}\r\nexport default Projection\r\n","class ProjParameter {\r\n    proj_param_list=[\r\n        { \"False_Easting\":          \"x_0\"   },\r\n        { \"False_Northing\" :        \"y_0\"   },\r\n        { \"Central_Meridian\":       \"lon_0\"  },\r\n        { \"Latitude_Of_Origin\":     \"lat_0\"  },\r\n        { \"Latitude_Of_Center\" :    \"lat_0\"  },\r\n        { \"Standard_Parallel_1\" :   \"lat_ts\" },\r\n        { \"Standard_Parallel_2\" :   \"lat_2\"  },\r\n        { \"Latitude_Of_1st_Point\":  \"lat_1\"  },\r\n        { \"Latitude_Of_2nd_Point\":  \"lat_2\"  },\r\n        { \"Longitude_Of_1st_Point\" : \"lon_1\"  },\r\n        { \"Longitude_Of_2nd_Point\" : \"lon_2\"  },\r\n        { \"Scale_Factor\" :           \"k\"},\r\n        { \"Azimuth\" :                \"alpha\"  },\r\n        { \"Longitude_Of_Center\" :    \"lonc\"}\r\n    ];\r\n    constructor(param) {\r\n        let values=Object.values(param)[0]\r\n        this.param_name=values[0];\r\n        this.param_value=values[1];\r\n    };\r\n    _get_proj_param(){\r\n        for (let i = 0; i < this.proj_param_list.length; i++) {\r\n            let obj=this.proj_param_list[i];\r\n            if (Object.keys(obj)[0].toLowerCase()===this.param_name.toLowerCase()){\r\n                return obj[Object.keys(obj)[0]]\r\n            }\r\n        }\r\n        return  \"\"\r\n    };\r\n    to_proj4(){\r\n        let para_value=this._get_proj_param()\r\n        return \" +\"+para_value+\"=\"+this.param_value;\r\n    }\r\n}\r\nexport  default  ProjParameter\r\n","class Uint{\r\n    constructor(unit) {\r\n        this.unit_name=Object.values(unit)[0][0]\r\n        // this.unit_value=Object.values(unit)[1]\r\n    };\r\n    unit_list=[\r\n        { \"Kilometer\" :      \"km\"    },\r\n        { \"Meter\" :          \"m\"     },\r\n        { \"Decimeter\" :      \"dm\"    },\r\n        { \"Centimeter\" :     \"cm\"    },\r\n        { \"Millimeter\" :     \"mm\"    },\r\n        { \"Foot_US\" :        \"us-ft\" },\r\n        { \"Foot_Gold_Coast\" :\"us-ft\" },\r\n        { \"Degree\" :         \"\"      },\r\n    ];\r\n    _get_unit(){\r\n        for (let i = 0; i < this.unit_list.length; i++) {\r\n            let obj=this.unit_list[i];\r\n            if (Object.keys(obj)[0].toLowerCase()===this.unit_name.toLowerCase()){\r\n                return obj[Object.keys(obj)[0]]\r\n            }\r\n        }\r\n        return \"Unknown\"\r\n    };\r\n    to_proj4(){\r\n        let unit_value=this._get_unit();\r\n        return \" +units=\"+unit_value;\r\n    }\r\n}\r\nexport default Uint\r\n"," import GeogCs from \"./GeogCs\";\r\nimport Projection from \"./Projection\";\r\nimport ProjParameter from \"./ProjParameter\";\r\nimport Uint from \"./Uint\";\r\nclass ProjCs{\r\n    constructor(name,geogcs,proj,params,unit) {\r\n        this.name=name;\r\n        this.geogcs=new GeogCs(geogcs);\r\n        this.proj=new Projection(proj);\r\n        this.params=params.map(value => {\r\n            return new ProjParameter(value)\r\n        })\r\n        this.unit=new Uint(unit);\r\n    }\r\n    to_proj4(){\r\n        let params=this.params.map(value => {\r\n            return value.to_proj4()\r\n        }).join(\" \")\r\n        return \" +proj=\"+this.proj.to_proj4()+this.geogcs.to_proj4(true)+params+this.unit.to_proj4()\r\n    }\r\n}\r\n export default  ProjCs\r\n","\r\nconst  PKW_PROJCS =\"PROJCS\";   //投影坐标系\r\nconst  PKW_GEOGCS=\"GEOGCS\";    //地理坐标系\r\nconst  PKW_DATUM=\"DATUM\";    //大地基准面\r\nconst  PKW_SPHEROID =\"SPHEROID\"; //椭球体定义\r\nconst  PKW_PRIMEM=\"PRIMEM\"; //本初子午线\r\nconst  PKW_UNIT = \"UNIT\"; //单位\r\nconst  PKW_PROJECTION =\"PROJECTION\"; //投影类型\r\nconst  PKW_PARAMETER = \"PARAMETER\";  //投影参数\r\nconst  PKW_AUTHORITY = \"AUTHORITY\";//权威定义\r\n\r\n\r\n\r\nimport ProjCs from \"./ProjCs\";\r\nimport GeogCs from \"./GeogCs\";\r\nclass Cs{\r\n    constructor(wkt_json) {\r\n        this.wkt_json=wkt_json\r\n        this.init()\r\n    }\r\n    get_geogcs(value){\r\n        let values=Object.values(value)[0]\r\n        return new GeogCs(values[0],values[1],values[2])\r\n    }\r\n    get_proj(value){\r\n        let values=Object.values(value)[0]\r\n        let  prj_name=values[0];\r\n        let proj_parma=[];\r\n        let geocs=\"\"\r\n        let unit=\"\";\r\n        let proj=\"\"\r\n        for (let i=0;i<values.length;i++){\r\n            if (values[i] instanceof  Object){\r\n                let key=Object.keys(values[i])[0].toUpperCase();\r\n                switch (key){\r\n                    case PKW_GEOGCS:\r\n                        geocs=values[i]\r\n                    case PKW_PARAMETER:\r\n                        proj_parma.push(values[i])\r\n                        break\r\n                    case PKW_UNIT:\r\n                        unit=values[i];\r\n                        break\r\n                    case PKW_PROJECTION:\r\n                        proj=values[i];\r\n                        break;\r\n                }\r\n\r\n            }\r\n        }\r\n        return new ProjCs(prj_name,geocs,proj,proj_parma,unit)\r\n    }\r\n    init(){\r\n        this.type=Object.keys(this.wkt_json)[0].toUpperCase();\r\n        if (Object.keys(this.wkt_json)[0].toUpperCase()===PKW_PROJCS){\r\n            this.cs=this.get_proj(this.wkt_json)\r\n        }else{\r\n            this.cs=this.get_geogcs(this.wkt_json)\r\n        }\r\n\r\n    }\r\n    to_proj4(){\r\n        return this.cs.to_proj4()+\" +no_defs +type=crs\"\r\n    }\r\n}\r\nexport default Cs\r\n","//\r\n// let wkt='GEOGCS[\"GCS_China_Geodetic_Coordinate_System_2000\",\\n' +\r\n//     '    DATUM[\"D_China_2000\",\\n' +\r\n//     '        SPHEROID[\"CGCS2000\",6378137.0,298.257222101]],\\n' +\r\n//     '    PRIMEM[\"Greenwich\",0.0],\\n' +\r\n//     '    UNIT[\"Degree\",0.0174532925199433]]'\r\n// 将wkt转换为json\r\n// function  wkt_to_json(wkt){\r\n//      if (!wkt) return;\r\n//       let count=wkt.length;\r\n//       let parser_str=\"\";\r\n//      for (let i = 0; i < wkt.length; i++) {\r\n//             let char=wkt[i];\r\n//             if (char ==\"[\" ){\r\n//                   char=\":[{\"\r\n//             }\r\n//             else if (char==\"]\"){\r\n//                  char=\"}]\"\r\n//             }else  if (char ==\"\\,\"){\r\n//                  char=\"},{\"\r\n//             }\r\n//             parser_str+=char;\r\n//      }\r\n//      let left_list=[];\r\n//      let remove_list=[];\r\n//      for (let i = 0; i < parser_str.length; i++) {\r\n//            let char=parser_str[i];\r\n//            if (char == \"{\"){\r\n//                 left_list.push(i)\r\n//            }else  if (char==\"}\" && left_list.length>0){\r\n//                  let substr=parser_str.substring(left_list[left_list.length-1],i);\r\n//                  if (!substr.includes(\":\")){\r\n//                      remove_list=remove_list.concat([left_list[left_list.length-1],i])\r\n//                      left_list=[];\r\n//                  }\r\n//            }\r\n//      }\r\n//      let result_str = \"\";\r\n//      for (let i = 0; i < parser_str.length; i++) {\r\n//           if(!remove_list.includes(i)){\r\n//                result_str+=parser_str[i]\r\n//           }\r\n//      }\r\n//      console.dir(eval(result_str))\r\n// }\r\n\r\nimport Cs from \"./Proj/Cs\";\r\n\r\n//获取wkt类型\r\nfunction get_wkt_type(data){\r\n     let key=data.keys[0];\r\n     //\r\n      let geo_gcs_content=null\r\n     if (key.toUpperCase()==\"PROJCS\")//投影坐标系\r\n     {\r\n         geo_gcs_content=data[key][1][data[key][1].keys[0]]\r\n     }else{\r\n         geo_gcs_content=data[key]\r\n     }\r\n     let datum_content=geo_gcs_content[geo_gcs_content.keys[0]]\r\n    let datum_name = datum_content[0].toUpperCase().trim('\"')\r\n    if (datum_name.startsWith(\"D_\"))\r\n        return  \"esri\"\r\n    else {\r\n        return  \"ogc\"\r\n    }\r\n}\r\n\r\n\r\n//wkt 转换为json格式\r\nfunction bracket_to_json(wkt,index=0){\r\n    let bracket_list=[];\r\n    let  key='';\r\n    for (let i = index; i < wkt.length; i++) {\r\n        let char=wkt[i];\r\n        if (char==\"[\"){\r\n            let obj={};\r\n            let result=bracket_to_json(wkt,i+1);\r\n            obj[key]=result[0];\r\n            bracket_list.push(obj);\r\n            i = result[1];\r\n            key='';\r\n        }else if (char == \"\\,\"){\r\n            if (key) {\r\n                bracket_list.push(key);\r\n                key = '';\r\n            }\r\n        }else if (char == \"]\"){\r\n            if (key){\r\n                bracket_list.push(key);\r\n            }\r\n            return [bracket_list,i];\r\n        }else{\r\n            if (char!=\"\\\"\" &&  char!=\"\\'\" && char!=' ' && char!=\"\\n\"){\r\n                key+=char\r\n            }\r\n        }\r\n    }\r\n    return  bracket_list[0];\r\n}\r\n\r\n\r\n\r\nfunction  to_proj4(str){\r\n    let wkt_json=bracket_to_json(str)\r\n    let cs=new Cs(wkt_json)\r\n    return cs.to_proj4()\r\n}\r\nexport  default  to_proj4\r\n"],"names":["Ellipsoids","ellipsoids_list","name","data","constructor","ellip","values","Object","this","a","rf","to_proj4","find","value","toLowerCase","ell","Datum","datum_list","proj4","ogc_wkt","esri_wkt","datum","ellipsoid","Prime","prime_list","prime","prime_name","prime_value","str","GeogCs","prime_mer","angunit","twin_ax","_get_geo_proj4","isPro","str_proj","Projection","proj_aliases_list","Aitoff","Albers","Azimuthal_Equidistant","Bonne","Cassini","Chamberlin_Trimetric","Craster_Parabolic","Cylindrical_Equal_Area","Eckert_I","Eckert_II","Eckert_III","Eckert_IV","Eckert_V","Eckert_VI","Equidistant_Conic","Equidistant_Cylindrical","Plate_Carree","Gall_Stereographic","Gauss_Kruger","Gnomonic","Goode_Homolosine","Hammer_Aitoff","Hotine_Oblique_Mercator_Azimuth_Center","Krovak","Lambert_Azimuthal_Equal_Area","Lambert_Conformal_Conic","Loximuthal","Mercator","Miller_Cylindrical","Mollweide","New_Zealand_Map_Grid","Orthographic","Perspectice","Polyconic","Quartic_Authalic","Robinson","Sinusoidal","Stereographic","Stereographic_South_Pole","Double_Stereographic","Transverse_Mercator","Two_Point_Equidistant","Universal_Polar_Stereographic","Universal_Transverse_Mercator","Van_der_Grinten_I","Winkel_I","Winkel_II","Winkel_Tripel","Hotine_Oblique_Mercator_Azimuth_Natural_Origin","Hotine_Oblique_Mercator_Two_Point_Natural_Origin","Mercator_Auxiliary_Sphere","Stereographic_North_Pole","Transverse_Mercator_Complex","proj","proj_name","_get_proj_name","i","length","obj","keys","ProjParameter","proj_param_list","False_Easting","False_Northing","Central_Meridian","Latitude_Of_Origin","Latitude_Of_Center","Standard_Parallel_1","Standard_Parallel_2","Latitude_Of_1st_Point","Latitude_Of_2nd_Point","Longitude_Of_1st_Point","Longitude_Of_2nd_Point","Scale_Factor","Azimuth","Longitude_Of_Center","param","param_name","param_value","_get_proj_param","Uint","unit","unit_name","unit_list","Kilometer","Meter","Decimeter","Centimeter","Millimeter","Foot_US","Foot_Gold_Coast","Degree","_get_unit","ProjCs","geogcs","params","map","join","Cs","wkt_json","init","get_geogcs","get_proj","prj_name","proj_parma","geocs","toUpperCase","push","type","cs","bracket_to_json","wkt","index","bracket_list","key","char","result"],"mappings":"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"}