{"version":3,"file":"wkt2proj.js","sources":["../src/Proj/Ellipsoids.js","../src/Proj/Datum.js","../src/Proj/Prime.js","../src/Proj/GeogCs.js","../src/Proj/Projection.js","../src/Proj/ProjParameter.js","../src/Proj/Uint.js","../src/Proj/ProjCs.js","../src/Proj/Cs.js","../src/index.js"],"sourcesContent":["class Ellipsoids{\r\n    ellipsoids_list=[\r\n        {\r\n            name:\"GRS80\",\r\n            data:[6378137.0,298.257222101],\r\n        },\r\n        {\r\n            name:\"airy\",\r\n            data:[6377563.396,6356256.910],\r\n        },\r\n        {\r\n            name:\"bessel\",\r\n            data:[6377397.155,299.1528128]\r\n        },\r\n        {\r\n            name:\"clrk66\",\r\n            data:[6378206.4,6356583.8]\r\n        },\r\n        {\r\n            name:\"intl\",\r\n            data:[6378388.0,297.0]\r\n        },\r\n        {\r\n            name:\"WGS60\",\r\n            data:[6378165.0,298.3]\r\n        },\r\n        {\r\n            name:\"WGS66\",\r\n            data:[6378145.0,298.25]\r\n        },\r\n        {\r\n            name:\"WGS72\",\r\n            data:[6378135.0,298.26]\r\n        },\r\n        {\r\n            name:\"WGS84\",\r\n            data:[6378137.0,298.257223563]\r\n        },\r\n        {\r\n            name:\"sphere\",\r\n            data:[6370997.0,6370997.0]\r\n        }\r\n    ]\r\n    constructor(ellip) {\r\n        let values=Object.values(ellip)[0]\r\n        this.name=values[0]\r\n        this.a=values[1]\r\n        this.rf=values[2]\r\n    }\r\n    to_proj4(){\r\n        if(this.ellipsoids_list.find(value => value.name.toLowerCase()===this.name.toLowerCase())){\r\n            return  \" +ellps=\"+this.name\r\n        }\r\n        let ell=this.ellipsoids_list.find(value => (value.data[0]==this.a) && value.data[1]==this.rf);\r\n        if (ell){\r\n            return \" +ellps=\"+ell.name\r\n        }else{\r\n            return  \" +a=\"+this.a+\" rf=\"+this.rf\r\n        }\r\n    }\r\n}\r\nexport default  Ellipsoids\r\n","import Ellipsoids from \"./Ellipsoids\"\r\nclass Datum{\r\n    datum_list=[\r\n        {\r\n            proj4: \"WGS84\",\r\n            ogc_wkt: \"WGS_1984\",\r\n            esri_wkt : \"D_WGS_1984\",\r\n        }]\r\n    constructor(datum) {\r\n        let values=Object.values(datum)[0]\r\n        this.name=values[0];\r\n        this.ellipsoid=new Ellipsoids(values[1])\r\n    }\r\n    to_proj4(){\r\n        // let str=''\r\n        //      if (this.datum_list.find(value => value.esri_wk))\r\n        return this.ellipsoid.to_proj4()\r\n    }\r\n\r\n}\r\nexport default Datum\r\n","\r\n\r\n\r\nclass Prime{\r\n    prime_list=[\"greenwich\", \"lisbon\", \"paris\", \"bogota\", \"madrid\",\"rome\",\"bern\",\"jakarta\",\"ferro\",\"brussels\",\"stockholm\",\"athens\",\"oslo\"]\r\n    constructor(prime) {\r\n        let values=Object.values(prime)[0]\r\n        this.prime_name=values[0];\r\n        this.prime_value=values[1]\r\n    };\r\n    to_proj4(){\r\n        let  str=\" +pm=\"\r\n        if (this.prime_list.find(value => value.toLowerCase()===this.prime_name.toLowerCase())){\r\n            str+=this.prime_name;\r\n        }else{\r\n            str+=this.prime_value\r\n        }\r\n        return str;\r\n    }\r\n}\r\nexport default Prime\r\n","import Datum from \"./Datum\";\r\nimport Prime from \"./Prime\";\r\nclass GeogCs{\r\n    constructor(name, datum, prime_mer, angunit, twin_ax=null) {\r\n        this.name=name;\r\n        this.datum=new Datum(datum);\r\n        this.prime_mer=new Prime(prime_mer);\r\n        this.angunit=angunit;\r\n        this.twin_ax=twin_ax;\r\n    }\r\n    _get_geo_proj4(){\r\n        return this.datum.to_proj4()+this.prime_mer.to_proj4()\r\n    }\r\n    to_proj4(isPro=false){\r\n        let str_proj=this._get_geo_proj4()\r\n        if (isPro){\r\n            return str_proj\r\n        }else {\r\n            return  \" +proj=longlat\"+str_proj\r\n        }\r\n\r\n    }\r\n}\r\nexport default GeogCs\r\n","class Projection{\r\n    proj_aliases_list=[\r\n        {\"Aitoff\":                              \"aitoff\"  },\r\n        {\"Albers\":                              \"aea\"     },\r\n        {\"Azimuthal_Equidistant\":               \"aeqd\"    },\r\n        {\"Bonne\":                               \"bonne\"   },\r\n        {\"Cassini\":                             \"cass\"    },\r\n        {\"Chamberlin_Trimetric\":                \"chamb\"   },\r\n        {\"Craster_Parabolic\":                   \"crast\"   },\r\n        {\"Cylindrical_Equal_Area\":              \"cea\"     },\r\n        {\"Eckert_I\":                            \"eck1\"    },\r\n        {\"Eckert_II\":                           \"eck2\"    },\r\n        {\"Eckert_III\":                          \"eck3\"    },\r\n        {\"Eckert_IV\":                           \"eck4\"    },\r\n        {\"Eckert_V\":                            \"eck5\"    },\r\n        {\"Eckert_VI\":                           \"eck6\"    },\r\n        {\"Equidistant_Conic\":                   \"eqdc\"    },\r\n        {\"Equidistant_Cylindrical\":             \"eqc\"     },\r\n        {\"Plate_Carree\":                        \"eqc\"     },\r\n        {\"Gall_Stereographic\":                  \"gall\"    },\r\n        {\"Gauss_Kruger\":                        \"tmerc\"   },\r\n        {\"Gnomonic\":                            \"gnom\"    },\r\n        {\"Goode_Homolosine\":                    \"goode\"   },\r\n        {\"Hammer_Aitoff\":                       \"hammer\"  },\r\n        {\"Hotine_Oblique_Mercator_Azimuth_Center\" :\"merc\"    },\r\n        {\"Krovak\":                              \"krovak\"  },\r\n        {\"Lambert_Azimuthal_Equal_Area\":        \"laea\"    },\r\n        {\"Lambert_Conformal_Conic\":             \"lcc\"     },\r\n        {\"Loximuthal\":                          \"loxim\"   },\r\n        {\"Mercator\":                            \"merc\"    },\r\n        {\"Miller_Cylindrical\":                  \"mill\"    },\r\n        {\"Mollweide\":                           \"moll\"    },\r\n        {\"New_Zealand_Map_Grid\":                \"nzmg\"    },\r\n        {\"Orthographic\":                        \"ortho\"   },\r\n        {\"Perspectice\":                         \"pconic\"  },\r\n        {\"Polyconic\":                           \"poly\"    },\r\n        {\"Quartic_Authalic\":                    \"qua_aut\" },\r\n        {\"Robinson\":                            \"robin\"   },\r\n        {\"Sinusoidal\":                          \"sinu\"    },\r\n        {\"Stereographic\":                       \"stere\"   },\r\n        {\"Stereographic_South_Pole\":            \"stere\"   },\r\n        {\"Double_Stereographic\":                \"sterea\"  },\r\n        {\"Transverse_Mercator\":                 \"tmerc\"   },\r\n        {\"Two_Point_Equidistant\":               \"tpeqd\"   },\r\n        {\"Universal_Polar_Stereographic\":       \"ups\"     },\r\n        {\"Universal_Transverse_Mercator\":       \"utm\"     },\r\n        {\"Van_der_Grinten_I\":                   \"vandg\"   },\r\n        {\"Winkel_I\":                            \"wink1\"   },\r\n        {\"Winkel_II\":                           \"wink2\"   },\r\n        {\"Winkel_Tripel\":                       \"wintri\"  },\r\n        {\"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\":  \"merc\"    },\r\n        {\"Hotine_Oblique_Mercator_Two_Point_Natural_Origin\": \"tpeqd\"   },\r\n        {\"Mercator_Auxiliary_Sphere\":           \"merc\"    },\r\n        {\"Stereographic_North_Pole\":            \"stere\"   },\r\n        {\"Transverse_Mercator_Complex\":         \"tmerc\"   },\r\n    ];\r\n    constructor(proj) {\r\n        this.proj_name=Object.values(proj)[0][0]\r\n    };\r\n    _get_proj_name(){\r\n        for (let i = 0; i < this.proj_aliases_list.length; i++) {\r\n            let obj=this.proj_aliases_list[i];\r\n            if (Object.keys(obj)[0].toLowerCase()===this.proj_name.toLowerCase()){\r\n                return obj[Object.keys(obj)[0]]\r\n            }\r\n        }\r\n        return  \"\"\r\n    };\r\n    to_proj4(){\r\n        return this._get_proj_name()\r\n    }\r\n}\r\nexport default Projection\r\n","class ProjParameter {\r\n    proj_param_list=[\r\n        { \"False_Easting\":          \"x_0\"   },\r\n        { \"False_Northing\" :        \"y_0\"   },\r\n        { \"Central_Meridian\":       \"lon_0\"  },\r\n        { \"Latitude_Of_Origin\":     \"lat_0\"  },\r\n        { \"Latitude_Of_Center\" :    \"lat_0\"  },\r\n        { \"Standard_Parallel_1\" :   \"lat_ts\" },\r\n        { \"Standard_Parallel_2\" :   \"lat_2\"  },\r\n        { \"Latitude_Of_1st_Point\":  \"lat_1\"  },\r\n        { \"Latitude_Of_2nd_Point\":  \"lat_2\"  },\r\n        { \"Longitude_Of_1st_Point\" : \"lon_1\"  },\r\n        { \"Longitude_Of_2nd_Point\" : \"lon_2\"  },\r\n        { \"Scale_Factor\" :           \"k\"},\r\n        { \"Azimuth\" :                \"alpha\"  },\r\n        { \"Longitude_Of_Center\" :    \"lonc\"}\r\n    ];\r\n    constructor(param) {\r\n        let values=Object.values(param)[0]\r\n        this.param_name=values[0];\r\n        this.param_value=values[1];\r\n    };\r\n    _get_proj_param(){\r\n        for (let i = 0; i < this.proj_param_list.length; i++) {\r\n            let obj=this.proj_param_list[i];\r\n            if (Object.keys(obj)[0].toLowerCase()===this.param_name.toLowerCase()){\r\n                return obj[Object.keys(obj)[0]]\r\n            }\r\n        }\r\n        return  \"\"\r\n    };\r\n    to_proj4(){\r\n        let para_value=this._get_proj_param()\r\n        return \" +\"+para_value+\"=\"+this.param_value;\r\n    }\r\n}\r\nexport  default  ProjParameter\r\n","class Uint{\r\n    constructor(unit) {\r\n        this.unit_name=Object.values(unit)[0][0]\r\n        // this.unit_value=Object.values(unit)[1]\r\n    };\r\n    unit_list=[\r\n        { \"Kilometer\" :      \"km\"    },\r\n        { \"Meter\" :          \"m\"     },\r\n        { \"Decimeter\" :      \"dm\"    },\r\n        { \"Centimeter\" :     \"cm\"    },\r\n        { \"Millimeter\" :     \"mm\"    },\r\n        { \"Foot_US\" :        \"us-ft\" },\r\n        { \"Foot_Gold_Coast\" :\"us-ft\" },\r\n        { \"Degree\" :         \"\"      },\r\n    ];\r\n    _get_unit(){\r\n        for (let i = 0; i < this.unit_list.length; i++) {\r\n            let obj=this.unit_list[i];\r\n            if (Object.keys(obj)[0].toLowerCase()===this.unit_name.toLowerCase()){\r\n                return obj[Object.keys(obj)[0]]\r\n            }\r\n        }\r\n        return \"Unknown\"\r\n    };\r\n    to_proj4(){\r\n        let unit_value=this._get_unit();\r\n        return \" +units=\"+unit_value;\r\n    }\r\n}\r\nexport default Uint\r\n"," import GeogCs from \"./GeogCs\";\r\nimport Projection from \"./Projection\";\r\nimport ProjParameter from \"./ProjParameter\";\r\nimport Uint from \"./Uint\";\r\nclass ProjCs{\r\n    constructor(name,geogcs,proj,params,unit) {\r\n        this.name=name;\r\n        this.geogcs=new GeogCs(geogcs);\r\n        this.proj=new Projection(proj);\r\n        this.params=params.map(value => {\r\n            return new ProjParameter(value)\r\n        })\r\n        this.unit=new Uint(unit);\r\n    }\r\n    to_proj4(){\r\n        let params=this.params.map(value => {\r\n            return value.to_proj4()\r\n        }).join(\" \")\r\n        return \" +proj=\"+this.proj.to_proj4()+this.geogcs.to_proj4(true)+params+this.unit.to_proj4()\r\n    }\r\n}\r\n export default  ProjCs\r\n","\r\nconst  PKW_PROJCS =\"PROJCS\";   //投影坐标系\r\nconst  PKW_GEOGCS=\"GEOGCS\";    //地理坐标系\r\nconst  PKW_DATUM=\"DATUM\";    //大地基准面\r\nconst  PKW_SPHEROID =\"SPHEROID\"; //椭球体定义\r\nconst  PKW_PRIMEM=\"PRIMEM\"; //本初子午线\r\nconst  PKW_UNIT = \"UNIT\"; //单位\r\nconst  PKW_PROJECTION =\"PROJECTION\"; //投影类型\r\nconst  PKW_PARAMETER = \"PARAMETER\";  //投影参数\r\nconst  PKW_AUTHORITY = \"AUTHORITY\";//权威定义\r\nimport ProjCs from \"./ProjCs\";\r\nimport GeogCs from \"./GeogCs\";\r\nclass Cs{\r\n    constructor(wkt_json) {\r\n        this.wkt_json=wkt_json\r\n        this.init()\r\n    }\r\n    _get_geogcs(value){\r\n        let values=Object.values(value)[0]\r\n        return new GeogCs(values[0],values[1],values[2])\r\n    }\r\n    _get_projcs(value){\r\n        let values=Object.values(value)[0]\r\n        let  prj_name=values[0];\r\n        let proj_parma=[];\r\n        let geocs=\"\"\r\n        let unit=\"\";\r\n        let proj=\"\"\r\n        for (let i=0;i<values.length;i++){\r\n            if (values[i] instanceof  Object){\r\n                let key=Object.keys(values[i])[0].toUpperCase();\r\n                switch (key){\r\n                    case PKW_GEOGCS:\r\n                        geocs=values[i];\r\n                        break;\r\n                    case PKW_PARAMETER:\r\n                        proj_parma.push(values[i]);\r\n                        break\r\n                    case PKW_UNIT:\r\n                        unit=values[i];\r\n                        break\r\n                    case PKW_PROJECTION:\r\n                        proj=values[i];\r\n                        break;\r\n                }\r\n\r\n            }\r\n        }\r\n        return new ProjCs(prj_name,geocs,proj,proj_parma,unit)\r\n    }\r\n    init(){\r\n        this.type=Object.keys(this.wkt_json)[0].toUpperCase();\r\n        if (Object.keys(this.wkt_json)[0].toUpperCase()===PKW_PROJCS){\r\n            this.cs=this._get_projcs(this.wkt_json)\r\n        }else{\r\n            this.cs=this._get_geogcs(this.wkt_json)\r\n        }\r\n\r\n    }\r\n    to_proj4(){\r\n        return this.cs.to_proj4()+\" +no_defs +type=crs\"\r\n    }\r\n}\r\nexport default Cs\r\n","//\r\n// let wkt='GEOGCS[\"GCS_China_Geodetic_Coordinate_System_2000\",\\n' +\r\n//     '    DATUM[\"D_China_2000\",\\n' +\r\n//     '        SPHEROID[\"CGCS2000\",6378137.0,298.257222101]],\\n' +\r\n//     '    PRIMEM[\"Greenwich\",0.0],\\n' +\r\n//     '    UNIT[\"Degree\",0.0174532925199433]]'\r\n// 将wkt转换为json\r\n// function  wkt_to_json(wkt){\r\n//      if (!wkt) return;\r\n//       let count=wkt.length;\r\n//       let parser_str=\"\";\r\n//      for (let i = 0; i < wkt.length; i++) {\r\n//             let char=wkt[i];\r\n//             if (char ==\"[\" ){\r\n//                   char=\":[{\"\r\n//             }\r\n//             else if (char==\"]\"){\r\n//                  char=\"}]\"\r\n//             }else  if (char ==\"\\,\"){\r\n//                  char=\"},{\"\r\n//             }\r\n//             parser_str+=char;\r\n//      }\r\n//      let left_list=[];\r\n//      let remove_list=[];\r\n//      for (let i = 0; i < parser_str.length; i++) {\r\n//            let char=parser_str[i];\r\n//            if (char == \"{\"){\r\n//                 left_list.push(i)\r\n//            }else  if (char==\"}\" && left_list.length>0){\r\n//                  let substr=parser_str.substring(left_list[left_list.length-1],i);\r\n//                  if (!substr.includes(\":\")){\r\n//                      remove_list=remove_list.concat([left_list[left_list.length-1],i])\r\n//                      left_list=[];\r\n//                  }\r\n//            }\r\n//      }\r\n//      let result_str = \"\";\r\n//      for (let i = 0; i < parser_str.length; i++) {\r\n//           if(!remove_list.includes(i)){\r\n//                result_str+=parser_str[i]\r\n//           }\r\n//      }\r\n//      console.dir(eval(result_str))\r\n// }\r\n\r\nimport Cs from \"./Proj/Cs\";\r\n\r\n//获取wkt类型\r\nfunction get_wkt_type(data){\r\n     let key=data.keys[0];\r\n     //\r\n      let geo_gcs_content=null\r\n     if (key.toUpperCase()==\"PROJCS\")//投影坐标系\r\n     {\r\n         geo_gcs_content=data[key][1][data[key][1].keys[0]]\r\n     }else{\r\n         geo_gcs_content=data[key]\r\n     }\r\n     let datum_content=geo_gcs_content[geo_gcs_content.keys[0]]\r\n    let datum_name = datum_content[0].toUpperCase().trim('\"')\r\n    if (datum_name.startsWith(\"D_\"))\r\n        return  \"esri\"\r\n    else {\r\n        return  \"ogc\"\r\n    }\r\n}\r\n\r\n\r\n//wkt 转换为json格式\r\nfunction bracket_to_json(wkt,index=0){\r\n    let bracket_list=[];\r\n    let  key='';\r\n    for (let i = index; i < wkt.length; i++) {\r\n        let char=wkt[i];\r\n        if (char==\"[\"){\r\n            let obj={};\r\n            let result=bracket_to_json(wkt,i+1);\r\n            obj[key]=result[0];\r\n            bracket_list.push(obj);\r\n            i = result[1];\r\n            key='';\r\n        }else if (char == \"\\,\"){\r\n            if (key) {\r\n                bracket_list.push(key);\r\n                key = '';\r\n            }\r\n        }else if (char == \"]\"){\r\n            if (key){\r\n                bracket_list.push(key);\r\n            }\r\n            return [bracket_list,i];\r\n        }else{\r\n            if (char!=\"\\\"\" &&  char!=\"\\'\" && char!=' ' && char!=\"\\n\"){\r\n                key+=char\r\n            }\r\n        }\r\n    }\r\n    return  bracket_list[0];\r\n}\r\n\r\nfunction  to_proj4(str){\r\n    let wkt_json=bracket_to_json(str)\r\n    let cs=new Cs(wkt_json)\r\n    return cs.to_proj4()\r\n}\r\n\r\nexport  default {\r\n      to_proj4\r\n}\r\n"],"names":[],"mappings":"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"}